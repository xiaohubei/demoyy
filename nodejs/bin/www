#!/usr/bin/env node

/**
* Module dependencies.
*/

var debug = require('debug')('nodejs:server');
var http = require('http');
var conf = require('../common/conf');

/**
* Get port from environment and store in Express.
*/

var port = normalizePort(conf.currentPort || '8888');

if (false) {
    var cluster = require('cluster');
    var numCPUs = require('os').cpus().length;
    if (cluster.isMaster) {
        console.log('master start ...');
        for (var i = 0; i < numCPUs; i++) {
            cluster.fork();
        }
        cluster.on('listening', function (worker, address) {
            console.log('worker pid: ' + worker.process.pid + ' start ...');
        });
        cluster.on('exit', function (worker, code, signal) {
            console.log('worker pid: ' + worker.process.pid + ' restart ...');
            setTimeout(function () { cluster.fork(); }, 2000);
        });
    } else {
        var app = require('../app');
        app.set('port', port);
        var server = http.createServer(app);
        server.listen(port);
        console.log('Server running at http://127.0.0.1:' + port + '/');
    }
    return;
}

var app = require('../app');
app.set('port', port);

/**
* Create HTTP server.
*/

var server = http.createServer(app);

/**
* Listen on provided port, on all network interfaces.
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log('Server running at http://127.0.0.1:' + port + '/');

/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
